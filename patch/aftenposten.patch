diff --git a/src/host/layer23/src/misc/app_cell_log.c b/src/host/layer23/src/misc/app_cell_log.c
index a7f42c3..451a494 100644
--- a/src/host/layer23/src/misc/app_cell_log.c
+++ b/src/host/layer23/src/misc/app_cell_log.c
@@ -70,8 +70,8 @@ int l23_app_init(struct osmocom_ms *ms)
 
 	srand(time(NULL));
 
-//	log_parse_category_mask(stderr_target, "DL1C:DRSL:DRR:DGPS:DSUM");
-	log_parse_category_mask(stderr_target, "DSUM");
+	log_parse_category_mask(stderr_target, "DL1C:DRSL:DRR:DGPS:DSUM");
+//	log_parse_category_mask(stderr_target, "DSUM");
 	log_set_log_level(stderr_target, LOGL_INFO);
 
 	l23_app_work = _scan_work;
diff --git a/src/host/layer23/src/misc/cell_log.c b/src/host/layer23/src/misc/cell_log.c
index 7340dcb..78d96db 100644
--- a/src/host/layer23/src/misc/cell_log.c
+++ b/src/host/layer23/src/misc/cell_log.c
@@ -117,11 +117,210 @@ static void start_sync(void);
 static void start_rach(void);
 static void start_pm(void);
 
+char *gsm_print_rxlev(uint8_t rxlev)
+{
+	static char string[5];
+	if (rxlev == 0)
+		return "<=-110";
+	if (rxlev >= 63)
+		return ">=-47";
+	sprintf(string, "-%d", 110 - rxlev);
+	return string;
+}
+
+static int class_of_band(struct osmocom_ms *ms, int band)
+{
+	struct gsm_settings *set = &ms->settings;
+
+	switch (band) {
+	case GSM_BAND_450:
+	case GSM_BAND_480:
+		return set->class_400;
+		break;
+	case GSM_BAND_850:
+		return set->class_850;
+		break;
+	case GSM_BAND_1800:
+		return set->class_dcs;
+		break;
+	case GSM_BAND_1900:
+		return set->class_pcs;
+		break;
+	}
+
+	return set->class_900;
+}
+
+static int16_t calculate_c1(int8_t rla_c, int8_t rxlev_acc_min,
+	int8_t ms_txpwr_max_cch, int8_t p)
+{
+	int16_t a, b, c1, max_b_0;
+
+	a = rla_c - rxlev_acc_min;
+	b = ms_txpwr_max_cch - p;
+
+	max_b_0 = (b > 0) ? b : 0;
+
+	c1 = a - max_b_0;
+
+	return c1;
+}
+
+static int16_t calculate_c2(int16_t c1, int serving, int last_serving,
+	int cell_resel_param_ind, uint8_t cell_resel_off, int t,
+	uint8_t penalty_time, uint8_t temp_offset) {
+	int16_t c2;
+
+	c2 = c1;
+
+	/* no reselect parameters. same process for serving and neighbour cells */
+	if (!cell_resel_param_ind) {
+		LOGP(DNB, LOGL_INFO, "C2 = C1 = %d (because no extended "
+			"re-selection parameters available)\n", c2);
+		return c2;
+	}
+
+	/* special case, if PENALTY_TIME is '11111' */
+	if (penalty_time == 31) {
+		c2 -= (cell_resel_off << 1);
+		LOGP(DNB, LOGL_INFO, "C2 = C1 - CELL_RESELECT_OFFSET (%d) = %d "
+			"(special case)\n", cell_resel_off, c2);
+		return c2;
+	}
+
+	c2 += (cell_resel_off << 1);
+
+	/* parameters for serving cell */
+	if (serving) {
+		LOGP(DNB, LOGL_INFO, "C2 = C1 + CELL_RESELECT_OFFSET (%d) = %d "
+			"(serving cell)\n", cell_resel_off, c2);
+		return c2;
+	}
+
+	/*  the cell is the last serving cell */
+	if (last_serving) {
+		LOGP(DNB, LOGL_INFO, "C2 = C1 + CELL_RESELECT_OFFSET (%d) = %d "
+			"(last serving cell)\n", cell_resel_off, c2);
+		return c2;
+	}
+
+	/*  penatly time reached */
+	if (t >= (penalty_time + 1) * 20) {
+		LOGP(DNB, LOGL_INFO, "C2 = C1 + CELL_RESELECT_OFFSET (%d) = %d "
+			"(PENALTY_TIME reached)\n", cell_resel_off, c2);
+		return c2;
+	}
+
+	/* penalty time not reached, substract temporary offset */
+	if (temp_offset < 7)
+		c2 -= temp_offset * 10;
+	else
+		c2 = -1000; /* infinite  */
+	LOGP(DNB, LOGL_INFO, "C2 = C1 + CELL_RESELECT_OFFSET (%d) = %d "
+		"(PENALTY_TIME not reached, %d seconds left)\n", cell_resel_off,
+		c2, (penalty_time + 1) * 20 - t);
+	return c2;
+}
+
+static void log_cs(void)
+{
+	struct gsm48_sysinfo *s = &sysinfo;
+	struct rx_meas_stat *meas = &ms->meas;
+	int8_t rxlev = meas->rxlev/meas->frames;
+
+	LOGFILE( "ARFCN |MCC          |MNC          |LAC    |cell ID|BSIC |"
+		"rx-lev|min-db |max-pwr|C1  |C2  |T3212 |TA |\n");
+	LOGFILE("-------+-------------+-------------+-------+-------+-----+"
+		"------+-------+-------+----+----+------+---+\n");
+		if (arfcn >= 1024) {
+			LOGFILE("%4dPCS|", arfcn-1024+512);
+		} else if (arfcn >= 512 && arfcn <= 885) {
+			LOGFILE("%4dDCS|", arfcn);
+		} else {
+			LOGFILE("%4d   |", arfcn);
+		}
+		if (s->mcc) {
+			LOGFILE("%3s %9s|%3s %9s|", 
+				gsm_print_mcc(s->mcc), gsm_get_mcc(s->mcc),
+				gsm_print_mnc(s->mnc), gsm_get_mnc(s->mcc, s->mnc)
+				);
+			LOGFILE("0x%04x |0x%04x |", s->lac, s->cell_id);
+			LOGFILE("%1d,%1d  |", s->bsic >> 3, s->bsic & 0x7);
+		} else {
+			LOGFILE("n/a            |n/a            |n/a    |n/a    |n/a  |");
+		}
+		if (s->si3 || s->si4) {
+			LOGFILE("%3s   |%4d   |%4d   |", 
+				gsm_print_rxlev(rxlev),
+				s->rxlev_acc_min_db,
+				s->ms_txpwr_max_cch
+				);
+		} else {
+			LOGFILE("n/a    |n/a    |n/a   |");
+		}
+		if (1) { //fixme
+			enum gsm_band band = gsm_arfcn2band(s->arfcn);
+			int class = class_of_band(ms, band);
+			int16_t c1, c2;
+
+			c1 = -calculate_c1(rxlev-110, s->rxlev_acc_min_db,
+				ms_pwr_dbm(band, s->ms_txpwr_max_cch),
+				ms_class_gmsk_dbm(band, class));
+			c2 = calculate_c2(c1,0,0,s->sp, s->sp_cro,0,s->sp_pt,s->sp_to);
+			LOGFILE("%4d|%4d|", c1, c2);
+		} else {
+			LOGFILE("n/a |n/a |");
+		}
+		if (s->si3){
+			LOGFILE("%4d |", s->t3212);
+		} else {
+			LOGFILE("n/a  |");
+		}
+		if (log_si.ta != 0xff){
+			LOGFILE("%2d |\n", log_si.ta);
+		} else {
+			LOGFILE("n/a|\n");
+		}
+	LOGFILE("\n");
+}
+
+static void log_nb(void)
+{
+	struct gsm48_sysinfo *s = &sysinfo;
+	char buffer[128];
+	int i, j, k;
+	j = 0; k = 0;
+	for (i = 0; i < 1024; i++) {
+		if ((s->freq[i].mask & FREQ_TYPE_NCELL)) {
+			if (!k) {
+				sprintf(buffer, "SI2 (neigh.) BA=%d: ",
+					s->nb_ba_ind_si2);
+				j = strlen(buffer);
+			}
+			if (j >= 112) {
+				buffer[j - 1] = '\0';
+				LOGFILE("%s\n", buffer);
+				sprintf(buffer, "                   ");
+				j = strlen(buffer);
+			}
+			sprintf(buffer + j, "%d,", i);
+			j = strlen(buffer);
+			k++;
+		}
+	}
+	if (j) {
+		buffer[j - 1] = '\0';
+		LOGFILE("%s\n\n", buffer);
+	}
+}
+
 static void log_gps(void)
 {
 	if (!g.enable || !g.valid)
 		return;
-	LOGFILE("position %.8f %.8f\n", g.longitude, g.latitude);
+	LOGFILE("\n");
+	LOGFILE("Position: %.8f %.8f\n", g.longitude, g.latitude);
+	LOGFILE("\n");
 }
 
 static void log_time(void)
@@ -132,7 +331,7 @@ static void log_time(void)
 		now = g.gmt;
 	else
 		time(&now);
-	LOGFILE("time %lu\n", now);
+	LOGFILE("%s ", ctime(&now));
 }
 
 static void log_frame(char *tag, uint8_t *data)
@@ -149,13 +348,13 @@ static void log_pm(void)
 {
 	int count = 0, i;
 
-	LOGFILE("[power]\n");
+	LOGFILE("[power] ");
 	log_time();
 	log_gps();
 	for (i = 0; i <= 1023; i++) {
 		if ((pm[i].flags & INFO_FLG_PM)) {
 			if (!count)
-				LOGFILE("arfcn %d", i);
+				LOGFILE("ARFCN %d", i);
 			LOGFILE(" %d", pm[i].rxlev_dbm);
 			count++;
 			if (count == 12) {
@@ -178,9 +377,7 @@ static void log_pm(void)
 
 static void log_sysinfo(void)
 {
-	struct rx_meas_stat *meas = &ms->meas;
 	struct gsm48_sysinfo *s = &sysinfo;
-	int8_t rxlev_dbm;
 	char ta_str[32] = "";
 
 	if (log_si.ta != 0xff)
@@ -190,29 +387,27 @@ static void log_sysinfo(void)
 		arfcn, gsm_print_mcc(s->mcc), gsm_print_mnc(s->mnc),
 		gsm_get_mcc(s->mcc), gsm_get_mnc(s->mcc, s->mnc), ta_str);
 
-	LOGFILE("[sysinfo]\n");
-	LOGFILE("arfcn %d\n", s->arfcn);
+	LOGFILE("[sysinfo] ");
 	log_time();
+	log_cs();
+	log_nb();
 	log_gps();
-	LOGFILE("bsic %d,%d\n", s->bsic >> 3, s->bsic & 7);
-	rxlev_dbm = meas->rxlev / meas->frames - 110;
-	LOGFILE("rxlev %d\n", rxlev_dbm);
+
 	if (s->si1)
-		log_frame("si1", s->si1_msg);
+		log_frame("SI1", s->si1_msg);
 	if (s->si2)
-		log_frame("si2", s->si2_msg);
+		log_frame("SI2", s->si2_msg);
 	if (s->si2bis)
-		log_frame("si2bis", s->si2b_msg);
+		log_frame("SI2bis", s->si2b_msg);
 	if (s->si2ter)
-		log_frame("si2ter", s->si2t_msg);
+		log_frame("SI2ter", s->si2t_msg);
 	if (s->si3)
-		log_frame("si3", s->si3_msg);
+		log_frame("SI3", s->si3_msg);
 	if (s->si4)
-		log_frame("si4", s->si4_msg);
-	if (log_si.ta != 0xff)
-		LOGFILE("ta %d\n", log_si.ta);
+		log_frame("SI4", s->si4_msg);
 
 	LOGFILE("\n");
+	LOGFILE("\n");
 	LOGFLUSH();
 }
 
diff --git a/src/host/layer23/src/mobile/main.c b/src/host/layer23/src/mobile/main.c
index a6dd082..63f82a0 100644
--- a/src/host/layer23/src/mobile/main.c
+++ b/src/host/layer23/src/mobile/main.c
@@ -69,7 +69,8 @@ int mobile_exit(struct osmocom_ms *ms, int force);
 
 
 const char *debug_default =
-	"DCS:DNB:DPLMN:DRR:DMM:DSIM:DCC:DMNCC:DSS:DLSMS:DPAG:DSUM:DSAP";
+	//"DCS:DNB:DPLMN:DRR:DMM:DSIM:DCC:DMNCC:DSS:DLSMS:DPAG:DSUM:DSAP";
+	"DBSSGP:DCC:DCS:DGPS:DL1C:DLLAPD:DLSMS:DMM:DMNCC:DMSC:DNB:DNS:DPAG:DPLMN:DRR:DRSL:DSAP:DSIM:DSS:DSUM:";
 
 const char *openbsc_copyright =
 	"Copyright (C) 2008-2010 ...\n"
